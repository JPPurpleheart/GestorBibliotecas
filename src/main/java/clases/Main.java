package clases;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    
	private static Scanner teclado = new Scanner(System.in);
	
    public static void main (String [] args) {
    	System.out.println("Hola Mundo");
    	
    	ArrayList<Libro> catalogo = new ArrayList<Libro>();
    	
    	while(true) {
    		int opcion = menu();
    		switch (opcion) {
			case 1:
				//TODO Alta de Libro
				//titulo:isbn:genero:autor:paginas
				alta(catalogo);
				break;
			case 2:
				//TODO Lista de Libros
				lista(catalogo);
				break;
			case 3:
				//TODO Baja de Libros
				baja(catalogo);
				break;
			case 4:
				//TODO Busqueda de Libros
				busqueda(catalogo);
				break;
			case 5:
				//TODO Ordenacion de Libros
				ordenacion(catalogo);
				break;
			case 6:
				//TODO Guardar el Catalogo de Libros en un Fichero de Texto
				guardarFicheros(catalogo);
				break;
			case 7:
				//TODO Leer el Catalogo de Libros en un Fichero de Texto
				leerCatalogo(catalogo);
				break;
			case 8:
				//TODO Vaciar el Catalogo de Libros del Fichero de Texto
				vaciarCatalogo(catalogo);
				break;			
			default:
				break;
			}
    	}
    }

	private static int menu() {
		int opcion=0;
    	
    	do {
    		System.out.println("Opciones:");
    		System.out.println("1. Alta de Libro");
    		System.out.println("2. Lista de Libros");
    		System.out.println("3. Baja de Libros");
    		System.out.println("4. Busqueda de Libros");
    		System.out.println("5. Ordenacion de Libros");
    		System.out.println("6. Guardar Catalogo");
    		System.out.println("7. Leer Catalogo");
    		System.out.println("8. Vaciar Catalogo");
    		System.out.println("Introduce la opcion:");
    	
    		opcion = leerOpcion(8);
    		
    	}while(opcion <=0);
    	
    	return opcion;
	}

	private static int leerOpcion(int max) {
		int opcion = 0;
    	try {
    		opcion=teclado.nextInt();
    		if(opcion>max)
    			opcion=-1;
    	}catch (InputMismatchException e) {
			System.out.println("Opcion incorrecta");
		}
    	
    	return opcion;
	}

	private static void alta(ArrayList<Libro> catalogo) {
    	//Leer de la entrada
    	String datosLibro = obtenerDatosLibro();
    	//titulo:isbn:genero:autor:paginas
    	//Procesar la entrada
    	Libro libro = procesaEntrada(datosLibro);
    	//Crear el libro con los datos de la entrada
    	catalogo.add(libro);
    	//Meter el libro en el catalogo;
    	
    }

	private static String obtenerDatosLibro() {
		String datos=null;
    	
		boolean validado=false;
    	while(!validado) {
    		System.out.println("Introduce los datos de un libro.");
    		System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
    		try {
    			datos = leerCadena();
    			if(validaDatos(datos))
    				validado=true;
    		}catch (InputMismatchException e) {
				System.out.println("Datos de entrada no validos");
			}
    	}
    	
    	return datos;
	}

	private static String leerCadena() {
		String opcion = null;
        opcion=teclado.next();
        System.out.println(opcion);
    	return opcion;
	}

	private static boolean validaDatos(String datos) {
		Boolean valido = false;
		String TITULO_ER = "/^([A-Z]|[a-z]|\\s)+$/g";
		String ISBN_ER = "^[0-9]{9}$";
		String GENERO_ER = "^(novela|NOVELA|poesia|POESIA|ficcion|FICCION)$";
		String AUTOR_ER = "/^([A-Z]|[a-z]|\\s)+$/g";
		String PAGINAS_ER = "^[0-9]{1,10}$";
		System.out.println("Selecciona tu opcion:" +
							"\n" +
							"1. Validacion de entrada de libros" +
							"\n" +
							"2. Validacion de entrada desde el archivo de catalogo");
		Integer opcion = teclado.nextInt();
		if (opcion == 1 /*&& datos.matches(TITULO_ER + ":" + ISBN_ER + ":" + GENERO_ER + ":" + AUTOR_ER + ":" + PAGINAS_ER) == true*/) {
			valido = true;
		} else if(opcion == 2 /*&& datos.matches(TITULO_ER + "," + ISBN_ER + "," + GENERO_ER + "," + AUTOR_ER + "," + PAGINAS_ER) == true*/) {
			valido = true;
		}
		
    	return valido;
	}

	private static Libro procesaEntrada(String entrada) {
		Libro libro = null;
    	
    	String [] datos = entrada.split(":"); 
    	
    	String titulo = datos[0];
    	String isbn = datos[1];
	    Genero genero = Genero.getGenero(datos[2]);
	    String autor = datos[3];
	    Integer paginas = Integer.parseInt(datos[4]);
	    libro = new Libro(titulo,isbn,genero,autor,paginas);
    	
    	return libro;
	}

	private static void lista(ArrayList<Libro> catalogo) {
		for(int i = 0; i < catalogo.size(); i ++) {
			catalogo.get(i);
			System.out.println("Libro "+ (i+1) +":");
			System.out.println("Titulo: " + catalogo.get(i).getTitulo());
			System.out.println("ISBN: " + catalogo.get(i).getIsbn());
			System.out.println("Genero: " + catalogo.get(i).getGenero());
			System.out.println("Autor: " + catalogo.get(i).getAutor());
			System.out.println("Paginas: " + catalogo.get(i).getPaginas());
			System.out.println("------------·------------·------------·------------·------------");
		}		
	}

	private static void baja(ArrayList<Libro> catalogo) {
		System.out.println("¿Que libro quieres que borre?");
		int indice = teclado.nextInt() - 1;
		if(Libro.comprobarBaja(indice, catalogo.size())) {
			catalogo.remove(indice);
    	}
	}

	private static void busqueda(ArrayList<Libro> catalogo) {
		System.out.println("Introduce un ISBN para buscar");
		String isbnabuscar = teclado.next();
		Libro libro = new Libro(isbnabuscar);
		int indice = catalogo.indexOf(libro);
		if (indice == -1) {
			System.out.println("Libro no encontrado, introduce un ISBN valido");
			isbnabuscar = teclado.next();
		} else {
			System.out.println(catalogo.get(indice));
			System.out.println(catalogo.get(indice).getTitulo());
			System.out.println(catalogo.get(indice).getIsbn());
			System.out.println(catalogo.get(indice).getGenero());
			System.out.println(catalogo.get(indice).getAutor());
			System.out.println(catalogo.get(indice).getPaginas());
		}
	}

	private static void ordenacion(ArrayList<Libro> catalogo) {
		System.out.println("¿Cómo quieres ordenar el catálogo?"
				+ "\n"
				+ "1. Orden Natural"
				+ "\n"
				+ "2. Orden por Nº de Páginas");
		int opcion = teclado.nextInt();
		if(opcion == 1) {
			//Ordenación Natural por Título
			ArrayList<Libro> catalogo_ordenado = (ArrayList<Libro>) catalogo.clone();
			Collections.sort(catalogo_ordenado);
			lista(catalogo_ordenado);
		} else if(opcion == 2) {
			//Ordenación por Nº de Páginas
			ArrayList<Libro> catalogo_ordenado = (ArrayList<Libro>) catalogo.clone();
			Collections.sort(catalogo_ordenado, new Libro());
			lista(catalogo_ordenado);
		} else {
			System.out.println("Ordenamiento Desconocido");
		}
		//Hola:987654321:NOVELA:Pepito:100
		//Adios:098765432:POESIA:Bollito:200
		//Ktal:123456789:FICCION:Vienita:300
	}

	private static void guardarFicheros(ArrayList<Libro> catalogo) {
		System.out.println("Introduzca nombre del fichero a guardar");
    	Scanner teclado = new Scanner(System.in);
    	String nombref = teclado.nextLine();
    	File catalogodeLibros = new File(System.getProperty("user.dir") + nombref);
		try {
			if (catalogodeLibros.createNewFile()) {
		        System.out.println("Archivo creado: " + catalogodeLibros.getName());
		        FileWriter escribir = new FileWriter(catalogodeLibros);
				for (Libro libro : catalogo) {
					if(validaDatos(libro.toString() + "\n"))
						escribir.write(libro.toString() + "\n");
					else
						System.out.println("Ocurrio un error al validar el libro");
				}
		      } else {
		        System.out.println("Archivo ya existente.");
		        FileWriter escribir = new FileWriter(catalogodeLibros);
				for (Libro libro : catalogo) {
					if(validaDatos(libro.toString() + "\n"))
						escribir.write(libro.toString() + "\n");
					else
						System.out.println("Ocurrio un error al validar el libro");
				}
		      }
		} catch (IOException e) {
			System.out.println("Ocurrio un Error al crear el archivo");
			e.printStackTrace();
		}
	}

	private static void leerCatalogo(ArrayList<Libro> catalogo) {
		Libro libro = null;
		System.out.println("Introduzca nombre del fichero a cargar");
    	Scanner teclado = new Scanner(System.in);
    	String nombref = teclado.nextLine();
    	Scanner myReader = null;
		try{
			File catalogodeLibros = new File(System.getProperty("user.dir") + nombref);
			try {
				myReader = new Scanner(catalogodeLibros);
				while (myReader.hasNextLine()) {
					String line = myReader.next();
					String[] datos = line.split(",");
					String titulo = datos[0];
			    	String isbn = datos[1];
				    Genero genero = Genero.getGenero(datos[2]);
				    String autor = datos[3];
				    Integer paginas = Integer.parseInt(datos[4]);
				    libro = new Libro(titulo,isbn,genero,autor,paginas);
					catalogo.add(libro);
					myReader.close();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		} catch (Exception ex) {
			System.out.println("Error: el fichero no se ha encontrado" + ex.getMessage());
		} finally {
    		try {
    			if (myReader != null)
    				myReader.close();
    		} catch (Exception exception) {
    			System.out.println("Mensaje 2: " + exception.getMessage());
    		}
    	}
	}

	private static void vaciarCatalogo(ArrayList<Libro> catalogo) { 
		System.out.println("Borrar el catalogo");
		catalogo.clear();
	}
}
