package clases;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    
	private static Scanner teclado = new Scanner(System.in);
	
    public static void main (String [] args) {
    	System.out.println("Hola Mundo");
    	//Creo el catalogo
    	ArrayList<Libro> catalogo = new ArrayList<Libro>();
    	
    	while(true) {
    		//Llamo al menu para obtener la opcion del programa a realizar
    		int opcion = menu();
    		//Utilizo un switch para poder llamar a cada metodo que realiza las funcionalidades
    		//del programa en funcion de la opcion obtenida del menu
    		switch (opcion) {
			case 1:
				//TODO Alta de Libro
				//titulo:isbn:genero:autor:paginas
				alta(catalogo);
				break;
			case 2:
				//TODO Lista de Libros
				lista(catalogo);
				break;
			case 3:
				//TODO Baja de Libros
				baja(catalogo);
				break;
			case 4:
				//TODO Busqueda de Libros
				busqueda(catalogo);
				break;
			case 5:
				//TODO Ordenacion de Libros
				ordenacion(catalogo);
				break;
			case 6:
				//TODO Guardar el Catalogo de Libros en un Fichero de Texto
				guardarFicheros(catalogo);
				break;
			case 7:
				//TODO Leer el Catalogo de Libros en un Fichero de Texto
				leerCatalogo(catalogo);
				break;
			case 8:
				//TODO Vaciar el Catalogo de Libros del Fichero de Texto
				vaciarCatalogo(catalogo);
				break;			
			default:
				break;
			}
    	}
    }

	private static int menu() {
		int opcion=0;
		//Muestro por consola las opciones de nuestro programa mientras la opcion no sea mayor que 0
    	do {
    		System.out.println("Opciones:");
    		System.out.println("1. Alta de Libro");
    		System.out.println("2. Lista de Libros");
    		System.out.println("3. Baja de Libros");
    		System.out.println("4. Busqueda de Libros");
    		System.out.println("5. Ordenacion de Libros");
    		System.out.println("6. Guardar Catalogo");
    		System.out.println("7. Leer Catalogo");
    		System.out.println("8. Vaciar Catalogo");
    		System.out.println("Introduce la opcion:");
    		//Llamo al metodo que devuelve la opcion elegida pasando
    		//por parametro el maximo de opciones disponibles
    		opcion = leerOpcion(8);
    		
    	}while(opcion <=0);
    	//Devuelvo la opcion a realizar
    	return opcion;
	}

	private static int leerOpcion(int max) {
		int opcion = 0;
    	try {
    		//Introduzco la opcion del menu para seleccionar que quieres que el programa haga
    		opcion=teclado.nextInt();
    		//Si la opcion supera el maximo de opciones pongo la opcion a -1
    		if(opcion>max)
    			opcion=-1;
    	}catch (InputMismatchException e) {
			System.out.println("Opcion incorrecta");
		}
    	//Devuelvo la opcion
    	return opcion;
	}

	private static void alta(ArrayList<Libro> catalogo) {
    	//Leer de la entrada
    	String datosLibro = obtenerDatosLibro();
    	//titulo:isbn:genero:autor:paginas
    	//Procesar la entrada
    	Libro libro = procesaEntrada(datosLibro);
    	//Crear el libro con los datos de la entrada
    	catalogo.add(libro);
    	//Meter el libro en el catalogo;
    	
    }

	private static String obtenerDatosLibro() {
		String datos=null;
    	
		boolean validado=false;
    	while(!validado) {
    		//Pregunto por los datos del libro
    		System.out.println("Introduce los datos de un libro.");
    		System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
    		try {
    			//Guardo en un String el retorno del metodo leer cadena que devuelve los datos
    			//que se pasan por consola
    			datos = leerCadena();
    			if(true)
    				validado=true;
    		}catch (InputMismatchException e) {
				System.out.println("Datos de entrada no validos");
			}
    	}
    	//Devuelvo el String con los datos
    	return datos;
	}

	private static String leerCadena() {
		//Creo la cadena a devolver
		String opcion = "";
		//Introduzco por consola la cadena con los datos del libro
        opcion=teclado.next();
        //Imprimo por consola la cadena con los datos del libro
        System.out.println(opcion);
        //Devuelvo la cadena con los datos del libro
    	return opcion;
	}	

	private static Libro procesaEntrada(String entrada) {
		Libro libro = null;
    	//Separo la cadena por el caracter separador y lo guardo en un array
    	String [] datos = entrada.split(":"); 
    	//Convierto cada posicion del array al tipo de dato de los atributos de la clase libro
    	String titulo = datos[0];
    	String isbn = datos[1];
	    Genero genero = Genero.getGenero(datos[2]);
	    String autor = datos[3];
	    Integer paginas = Integer.parseInt(datos[4]);
	    //Una vez obtenido todos los datos del libro creo un libro con los datos obtenidos
	    libro = new Libro(titulo,isbn,genero,autor,paginas);
    	//Devuelvo el libro creado
    	return libro;
	}

	private static void lista(ArrayList<Libro> catalogo) {
		//Recorro el catalogo de libros
		for(int i = 0; i < catalogo.size(); i ++) {
			//Por cada libro obtengo el indice de cada libro
			catalogo.get(i);
			//Imprimo un mensaje por consola con el indice
			//de cada libro mas 1 para no empezar en 0
			System.out.println("Libro "+ (i+1) +":");
			//Imprimo los datos de cada libro
			System.out.println("Titulo: " + catalogo.get(i).getTitulo());
			System.out.println("ISBN: " + catalogo.get(i).getIsbn());
			System.out.println("Genero: " + catalogo.get(i).getGenero());
			System.out.println("Autor: " + catalogo.get(i).getAutor());
			System.out.println("Paginas: " + catalogo.get(i).getPaginas());
			//Imprimo un mensaje con una cadena para separar los libros impresos
			System.out.println("----------------------------------------------------------------");
		}		
	}

	private static void baja(ArrayList<Libro> catalogo) {
		//Pregunto por el libro que quiero borrar que corresponde a su indice en el catalogo
		System.out.println("¿Que libro quieres que borre?");
		//Introduzco por consola el indice del libro suponiendo que el indice no va a empezar
		//por 0 como en los objetos de tipo ArrayList<T> sino por 1 como resultaria logico
		int indice = teclado.nextInt() - 1;
		//Utilizo el metodo comprobarBaja de la clase Libro para
		//comprobar que se puede eliminar el libro
		if(Libro.comprobarBaja(indice, catalogo.size())) {
			//Dado que es posible la eliminacion elimino el libro del catalogo
			catalogo.remove(indice);
    	}
	}

	private static void busqueda(ArrayList<Libro> catalogo) {
		//Pido el isbn a buscar
		System.out.println("Introduce un ISBN para buscar");
		//Escribo por consola el isbn para buscar el libro
		String isbnabuscar = teclado.next();
		//Introduzco el isbn en un objeto Libro
		Libro libro = new Libro(isbnabuscar);
		//Uso el método indexOf para comparar el isbn del
		//libro creado con los isbn de los libros del catalogo
		int indice = catalogo.indexOf(libro);
		//Si el resultado numerico del método indexOf sale -1 no ha encontrado el libro
		if (indice == -1) {
			//Vuelve a preguntarle el isbn para volver a buscar el libro
			System.out.println("Libro no encontrado, introduce un ISBN valido");
			isbnabuscar = teclado.next();
		} else {
			//Si encuentra el libro muestro el resultado y el libro encontrado por consola
			System.out.println(catalogo.get(indice));
			System.out.println(catalogo.get(indice).getTitulo());
			System.out.println(catalogo.get(indice).getIsbn());
			System.out.println(catalogo.get(indice).getGenero());
			System.out.println(catalogo.get(indice).getAutor());
			System.out.println(catalogo.get(indice).getPaginas());
		}
	}

	private static void ordenacion(ArrayList<Libro> catalogo) {
		System.out.println("¿Como quieres ordenar el catalogo?"
				+ "\n"
				+ "1. Orden Natural"
				+ "\n"
				+ "2. Orden por No de Paginas");
		int opcion = teclado.nextInt();
		if(opcion == 1) {
			//Ordenacion Natural por Titulo
			ArrayList<Libro> catalogo_ordenado = (ArrayList<Libro>) catalogo.clone();
			Collections.sort(catalogo_ordenado);
			lista(catalogo_ordenado);
		} else if(opcion == 2) {
			//Ordenacion por No de Paginas
			ArrayList<Libro> catalogo_ordenado = (ArrayList<Libro>) catalogo.clone();
			Collections.sort(catalogo_ordenado, new Libro());
			lista(catalogo_ordenado);
		} else {
			System.out.println("Ordenamiento Desconocido");
		}
	}

	private static void guardarFicheros(ArrayList<Libro> catalogo) {
		//Pregunto por el nombre del fichero a escribir
		System.out.println("Introduzca nombre del fichero");
		//Creo el Scanner para leer de consola
    	Scanner teclado = new Scanner(System.in);
    	//Leo de consola el nombre del fichero a escribir
    	String nombref = teclado.nextLine();
    	//Creo un objeto File con la direccion del fichero a escribir que está en la
    	//carpeta donde se ejecuta nuestro programa / y el nombre del fichero
    	File catalogodeLibros = new File(System.getProperty("user.dir") + "/" + nombref);    	
		try {
			//Si el fichero se ha creado muestro por consola un mensaje para
			//notificar que se ha creado con el nombre del fichero creado
			if (catalogodeLibros.createNewFile()) {
				System.out.println("Archivo creado: " + catalogodeLibros.getName());
			} else {
				//Si el fichero ya se ha creado muestra un mensaje por
				//consola diciendo que ya se ha creado
				System.out.println("Archivo ya existente.");
			}
			//Creo un objeto FileWriter para poder escribir en el fichero que se pasa por parametro
			FileWriter escribir = new FileWriter(catalogodeLibros);
			//Recorro el catalogo
			for(Libro libro : catalogo) {
				//Para cada libro utilizo el metodo toString de la clase Libro
				//para escribir en el catalogo con el formato que se nos pide
				escribir.write(libro.toString());
				escribir.write("\n");
	    	}
			escribir.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static void leerCatalogo(ArrayList<Libro> catalogo) {
		Libro libro = null;
		//Pregunto por el nombre del fichero a leer
		System.out.println("Introduzca nombre del fichero a cargar");
    	//Creo el Scanner para leer de consola
		Scanner teclado = new Scanner(System.in);
		//Leo de consola el nombre del fichero a leer
    	String nombref = teclado.nextLine();
    	Scanner myReader;
    	//Creo un objeto File con la direccion del fichero a leer que está en la
    	//carpeta donde se ejecuta nuestro programa / y el nombre del fichero
		File catalogodeLibros = new File(System.getProperty("user.dir") + "/" + nombref);
		try {
			//Creo un Scanner para leer el fichero que se le pasa por parametro
			myReader = new Scanner(catalogodeLibros);
			//Mientras el fichero tenga al menos una linea tras la ya leida
			while (myReader.hasNextLine()) {
				//Leo una a una las lineas del fichero a leer
				String line = myReader.nextLine();
				//Separo las cadenas por el caracter separador y lo guardo en un array
				String[] datos = line.split(",");
				//Convierto cada posicion del array al tipo de dato de los atributos de la clase libro
				String titulo = datos[0];
				String isbn = datos[1];
			    Genero genero = Genero.getGenero(datos[2]);
			    String autor = datos[3];
			    Integer paginas = Integer.parseInt(datos[4]);
			    //Una vez obtenidos todos los datos de cada libro creo cada libro con los datos obtenidos
			    libro = new Libro(titulo,isbn,genero,autor,paginas);
			    //Añado cada libro al catalogo
				catalogo.add(libro);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	private static void vaciarCatalogo(ArrayList<Libro> catalogo) { 
		System.out.println("Borrar el catalogo");
		//Vacio el catalogo
		catalogo.clear();
	}
}
